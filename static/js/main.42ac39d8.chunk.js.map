{"version":3,"sources":["components/Header.js","components/Note.js","components/CreateNote.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Note","props","title","content","onClick","onDelete","id","CreateNote","useState","note","setNote","expandedArea","setExpandedArea","handleChange","e","target","name","value","prevNote","onSubmit","preventDefault","maxNotes","length","onAdd","maxLength","type","placeholder","onChange","maxlength","rows","Zoom","in","Fab","App","notes","setNotes","deleteNote","prevNotes","filter","currentItem","index","newNote","map","noteItem","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAaeA,EAVA,WACb,OACE,4BAAQC,UAAU,UAChB,4BACE,kBAAC,IAAD,MADF,c,iBCSSC,EAZF,SAACC,GACZ,OACE,yBAAKF,UAAU,QACb,4BAAKE,EAAMC,OACX,2BAAID,EAAME,SACV,4BAAQC,QAAS,kBAAMH,EAAMI,SAASJ,EAAMK,MAC5C,kBAAC,IAAD,S,iDCyESC,EA5EI,SAACN,GAAW,IAAD,EAELO,mBAAS,CAC9BN,MAAO,GACPC,QAAS,KAJiB,mBAErBM,EAFqB,KAEhBC,EAFgB,OAOYF,oBAAS,GAPrB,mBAOrBG,EAPqB,KAOPC,EAPO,KAUtBC,EAAe,SAACC,GAAO,IAAD,EACJA,EAAEC,OAAjBC,EADmB,EACnBA,KAAMC,EADa,EACbA,MACbP,GAAQ,SAAAQ,GACN,OAAO,eACFA,EADL,eAEGF,EAAOC,QAyBd,OACE,6BACE,0BAAME,SAlBS,SAACL,GAClBA,EAAEM,iBACgB,KAAfX,EAAKP,OAAiC,KAAjBO,EAAKN,SAG1BF,EAAMoB,SAASC,QAAU,KAG5BrB,EAAMsB,MAAMd,GACZC,EAAQ,CACNR,MAAO,GACPC,QAAQ,OAOoBJ,UAAU,eAEpC,2BACEyB,UAAY,KACZC,KAAK,OACLT,KAAK,QACLC,MAAOR,EAAKP,MACZwB,YAAY,QACZtB,QA9BgB,WACtBQ,GAAgB,IA8BVe,SAAUd,IAIVF,GACA,8BACEiB,UAAU,MACVZ,KAAK,UACLW,SAAUd,EACVI,MAAOR,EAAKN,QACZuB,YAAY,iBACZG,KAAK,MAIT,kBAACC,EAAA,EAAD,CAAMC,GAAIpB,GACR,kBAACqB,EAAA,EAAD,CAAKP,KAAK,UACR,kBAAC,IAAD,WCrBGQ,EAhDH,WAAO,IAAD,EAEUzB,mBAAS,IAFnB,mBAET0B,EAFS,KAEFC,EAFE,KAaVC,EAAa,SAAC9B,GAClB6B,GAAS,SAAAE,GACP,OAAOA,EAAUC,QAAO,SAACC,EAAaC,GACpC,OAAOA,IAAUlC,SAKvB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEiB,MArBU,SAACkB,GACfN,GAAS,SAAAE,GACP,MAAM,GAAN,mBACKA,GADL,CAEEI,QAkBApB,SAAUa,IAGZ,6BAEEA,EAAMQ,KAAI,SAACC,EAAUH,GACnB,OACE,kBAAC,EAAD,CACEI,IAAKJ,EACLlC,GAAIkC,EACJtC,MAAOyC,EAASzC,MAChBC,QAASwC,EAASxC,QAClBE,SAAU+B,UC/BJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42ac39d8.chunk.js","sourcesContent":["import React from 'react';\nimport HighlightIcon from '@material-ui/icons/Highlight';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <h1>\n        <HighlightIcon />One Note\n      </h1>\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst Note = (props) => {\n  return (\n    <div className=\"note\">  \n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n      <button onClick={() => props.onDelete(props.id)}>\n      <DeleteIcon />\n      </button>\n    </div>\n  );\n};\n\nexport default Note;","import React, { useState } from 'react';\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\nimport { Fab, Zoom } from '@material-ui/core';\n\n\n\nconst CreateNote = (props) => {\n  \n  const [note,setNote] = useState({ //note object\n    title: \"\",\n    content: \"\"\n  });\n\n  const [expandedArea, setExpandedArea] = useState(false);\n\n  // e is the event object passed into the event handler\n  const handleChange = (e) => {\n    const {name, value} = e.target;\n    setNote(prevNote => {\n      return { //new object\n        ...prevNote, \n        [name]: value //add new value/element at the end \n      };\n    });\n  }\n\n  const handleExpansion = () => {\n    setExpandedArea(true);\n  }\n\n  const submitNote = (e) => {\n    e.preventDefault();\n    if(note.title === \"\" && note.content === \"\"){\n      return;\n    }\n    if(props.maxNotes.length >= 11){\n        return;\n    }    \n    props.onAdd(note);\n    setNote({\n      title: \"\", \n      content:\"\"\n    });\n  }\n\n\n  return (\n    <div>\n      <form onSubmit={submitNote} className=\"create-note\">\n\n        <input \n          maxLength = \"15\"\n          type=\"text\"\n          name=\"title\" \n          value={note.title}\n          placeholder=\"Title\"\n          onClick={handleExpansion}\n          onChange={handleChange} \n        />\n        \n        {\n          expandedArea &&\n          <textarea \n            maxlength=\"100\"\n            name=\"content\" \n            onChange={handleChange} \n            value={note.content} \n            placeholder=\"Take a note...\" \n            rows=\"3\"\n          />\n        }\n\n        <Zoom in={expandedArea}>\n          <Fab type=\"submit\">\n            <AddRoundedIcon />\n          </Fab>\n        </Zoom>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateNote;","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Note from './components/Note';\nimport CreateNote from './components/CreateNote'\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([]);\n  \n  const addNote = (newNote) => {\n    setNotes(prevNotes => {\n      return [\n        ...prevNotes, \n        newNote //add new note/element at the end\n      ];\n    });\n  }\n\n  const deleteNote = (id) => {\n    setNotes(prevNotes => {\n      return prevNotes.filter((currentItem, index) => {\n        return index !== id;\n      })\n    });\n  };\n\n  return (\n    <div>\n      <Header />\n      <CreateNote \n        onAdd={addNote} \n        maxNotes={notes}\n        />\n\n      <div>\n      {\n        notes.map((noteItem, index) => {\n          return (\n            <Note \n              key={index} \n              id={index} \n              title={noteItem.title} \n              content={noteItem.content}\n              onDelete={deleteNote}\n              />    \n          )\n        })\n      }\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}